// DriverJsProvider.tsx
'use client';
import { createContext, FC, ReactNode, useEffect, useState } from 'react';
import 'driver.js/dist/driver.css';
import { Driver } from 'driver.js';

interface IDriverJsContext {
	driver: Driver | null;
	startTour: () => void;
	isReady: boolean;
}

interface IDriverJsProviderProps {
	children: ReactNode;
}

export const DriverJsContext = createContext<IDriverJsContext>({
	driver: null,
	startTour: () => {},
	isReady: false
});

export const DriverJsProvider: FC<IDriverJsProviderProps> = ({ children }) => {
	const [driverInstance, setDriverInstance] = useState<Driver | null>(null);

	// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
	const saveCurrentStep = (stepIndex: number) => {
		localStorage.setItem('tourCurrentStep', String(stepIndex));
	};

	const getSavedStep = () => {
		const saved = localStorage.getItem('tourCurrentStep');
		return saved ? Number(saved) : 0;
	};

	const clearTourProgress = () => {
		localStorage.removeItem('tourCurrentStep');
		localStorage.setItem('tourCompleted', 'true');
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–∞
	const startTour = () => {
		if (!driverInstance) return;

		const savedStep = getSavedStep();
		const firstElement = document.querySelector('#welcome-title');

		if (firstElement) {
			if (savedStep > 0) {
				driverInstance.drive(savedStep);
			} else {
				driverInstance.drive();
			}
		}
	};

	useEffect(() => {
		const initDriver = async () => {
			if (typeof window !== 'undefined') {
				try {
					const { driver } = await import('driver.js');

					const driverObj = driver({
						showProgress: true,
						allowClose: false,
						nextBtnText: '–î–∞–ª–µ–µ ‚Üí',
						prevBtnText: '‚Üê –ù–∞–∑–∞–¥',
						onHighlighted: () => {
							const currentStep = driverObj.getActiveIndex();
							if (currentStep !== null) {
								saveCurrentStep(currentStep!);
							}
						},
						onDestroyed: () => {
							clearTourProgress();
						},
						steps: [
							{
								element: '#enter_the_chart_period',
								popover: {
									title: '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞',
									description:
										'–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
									side: 'bottom',
									align: 'center'
								}
							},
							{
								element: '#select_the_weekdays',
								popover: {
									title: '–í—ã–¥–µ–ª–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏',
									description: '',
									side: 'bottom',
									align: 'center'
								}
							},
							{
								element: '#you_can_add_a_break_during_the_workday',
								popover: {
									title: '–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ.',
									description: '–ù–∞–∂–∞–≤ –Ω–∞ –ø–ª—é—Å–∏–∫, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–µ—Ä–µ—Ä—ã–≤–∞',
									side: 'top',
									align: 'center'
								}
							},
							{
								element: '#click_the_plus_icon_to_specify_the_break_interval',
								popover: {
									title: '–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ.',
									description: '–ù–∞–∂–∞–≤ –Ω–∞ –ø–ª—é—Å–∏–∫, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–µ—Ä–µ—Ä—ã–≤–∞',
									side: 'top',
									align: 'center'
								}
							},
							{
								element: '#click_the_minus_icon_to_remove_the_interval',
								popover: {
									title: '',
									description:
										'–ù–∞–∂–∞–≤ –Ω–∞ –∏–∫–æ–Ω–∫—É –º–∏–Ω—É—Å, –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫',
									side: 'left',
									align: 'center'
								}
							},
							{
								element: '#footer-info',
								popover: {
									title: '–≠—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª',
									description:
										'Elcho.dev - —ç—Ç–æ –º–æ–π –ª–∏—á–Ω—ã–π —Å–∞–π—Ç, –≥–¥–µ —è –¥–µ–ª—é—Å—å —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏. –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç —Å–∞–π—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞ —É –º–µ–Ω—è.',
									side: 'bottom',
									align: 'center'
								}
							}
						]
					});

					setDriverInstance(driverObj);
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Driver.js:', error);
				}
			}
		};

		initDriver();
	}, []);

	const contextValue: IDriverJsContext = {
		driver: driverInstance,
		startTour,
		isReady: driverInstance !== null
	};

	return (
		<DriverJsContext.Provider value={contextValue}>
			{children}
		</DriverJsContext.Provider>
	);
};
