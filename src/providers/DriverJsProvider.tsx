// DriverJsProvider.tsx
'use client';
import { createContext, FC, ReactNode, useEffect, useState } from 'react';
import 'driver.js/dist/driver.css';
import { Driver } from 'driver.js';

interface IDriverJsContext {
	driver: Driver | null;
	startTour: () => void;
	isReady: boolean;
}

interface IDriverJsProviderProps {
	children: ReactNode;
}

export const DriverJsContext = createContext<IDriverJsContext>({
	driver: null,
	startTour: () => {},
	isReady: false
});

export const DriverJsProvider: FC<IDriverJsProviderProps> = ({ children }) => {
	const [driverInstance, setDriverInstance] = useState<Driver | null>(null);

	// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
	const saveCurrentStep = (stepIndex: number) => {
		localStorage.setItem('tourCurrentStep', String(stepIndex));
	};

	const getSavedStep = () => {
		const saved = localStorage.getItem('tourCurrentStep');
		return saved ? Number(saved) : 0;
	};

	const clearTourProgress = () => {
		localStorage.removeItem('tourCurrentStep');
		localStorage.setItem('tourCompleted', 'true');
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–∞
	const startTour = () => {
		if (!driverInstance) return;

		const savedStep = getSavedStep();
		const firstElement = document.querySelector('#welcome-title');

		if (firstElement) {
			if (savedStep > 0) {
				driverInstance.drive(savedStep);
			} else {
				driverInstance.drive();
			}
		}
	};

	useEffect(() => {
		const initDriver = async () => {
			if (typeof window !== 'undefined') {
				try {
					const { driver } = await import('driver.js');

					const driverObj = driver({
						showProgress: true,
						allowClose: false,
						nextBtnText: '–î–∞–ª–µ–µ ‚Üí',
						prevBtnText: '‚Üê –ù–∞–∑–∞–¥',
						onHighlighted: () => {
							const currentStep = driverObj.getActiveIndex();
							if (currentStep !== null) {
								saveCurrentStep(currentStep!);
							}
						},
						onDestroyed: () => {
							clearTourProgress();
						},
						steps: [
							{
								element: '#welcome-title',
								popover: {
									title: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
									description:
										'–≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞. –ó–¥–µ—Å—å –º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –Ω–∞—à–µ–π –º–∏—Å—Å–∏–∏.',
									side: 'bottom',
									align: 'center'
								}
							},
							{
								element: '#welcome-description',
								popover: {
									title: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
									description:
										'–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ–º, –∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏ –ø–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–∞—Å.',
									side: 'bottom',
									align: 'center'
								}
							},
							{
								element: '#primary-btn',
								popover: {
									title: 'üöÄ –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
									description:
										'–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç Elcho.dev, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.',
									side: 'top',
									align: 'center'
								}
							},
							{
								element: '#secondary-btn',
								popover: {
									title: 'üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
									description:
										'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã, –∏–∑—É—á–∏—Ç—å –∫–µ–π—Å—ã –∏ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π.',
									side: 'top',
									align: 'center'
								}
							},
							{
								element: '#decoration',
								popover: {
									title: '‚ú® –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
									description:
										'–≠—Ç–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.',
									side: 'left',
									align: 'center'
								}
							},
							{
								element: '#footer-info',
								popover: {
									title: '–≠—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üë®‚Äçüíª',
									description:
										'Elcho.dev - —ç—Ç–æ –º–æ–π –ª–∏—á–Ω—ã–π —Å–∞–π—Ç, –≥–¥–µ —è –¥–µ–ª—é—Å—å —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏. –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç —Å–∞–π—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞ —É –º–µ–Ω—è.',
									side: 'bottom',
									align: 'center'
								}
							}
						]
					});

					setDriverInstance(driverObj);
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Driver.js:', error);
				}
			}
		};

		initDriver();
	}, []);

	const contextValue: IDriverJsContext = {
		driver: driverInstance,
		startTour,
		isReady: driverInstance !== null
	};

	return (
		<DriverJsContext.Provider value={contextValue}>
			{children}
		</DriverJsContext.Provider>
	);
};
